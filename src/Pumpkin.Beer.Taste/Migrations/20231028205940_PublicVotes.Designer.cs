// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pumpkin.Beer.Taste.Data;

#nullable disable

namespace Pumpkin.Beer.Taste.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231028205940_PublicVotes")]
    partial class PublicVotes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Pumpkin.Beer.Taste.Data.Blind", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("Closed")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedByUserDisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("InviteCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("Started")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedByUserDisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Blind");
                });

            modelBuilder.Entity("Pumpkin.Beer.Taste.Data.BlindItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BlindId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByUserDisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Ordinal")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedByUserDisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("BlindId");

                    b.ToTable("BlindItem");
                });

            modelBuilder.Entity("Pumpkin.Beer.Taste.Data.BlindVote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BlindItemId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByUserDisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Public")
                        .HasColumnType("bit");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedByUserDisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("BlindItemId");

                    b.ToTable("BlindVote");
                });

            modelBuilder.Entity("Pumpkin.Beer.Taste.Data.UserInvite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BlindId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByUserDisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedByUserDisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("BlindId");

                    b.ToTable("UserInvite");
                });

            modelBuilder.Entity("Pumpkin.Beer.Taste.Data.BlindItem", b =>
                {
                    b.HasOne("Pumpkin.Beer.Taste.Data.Blind", "Blind")
                        .WithMany("BlindItems")
                        .HasForeignKey("BlindId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blind");
                });

            modelBuilder.Entity("Pumpkin.Beer.Taste.Data.BlindVote", b =>
                {
                    b.HasOne("Pumpkin.Beer.Taste.Data.BlindItem", "BlindItem")
                        .WithMany("BlindVotes")
                        .HasForeignKey("BlindItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BlindItem");
                });

            modelBuilder.Entity("Pumpkin.Beer.Taste.Data.UserInvite", b =>
                {
                    b.HasOne("Pumpkin.Beer.Taste.Data.Blind", "Blind")
                        .WithMany("UserInvites")
                        .HasForeignKey("BlindId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blind");
                });

            modelBuilder.Entity("Pumpkin.Beer.Taste.Data.Blind", b =>
                {
                    b.Navigation("BlindItems");

                    b.Navigation("UserInvites");
                });

            modelBuilder.Entity("Pumpkin.Beer.Taste.Data.BlindItem", b =>
                {
                    b.Navigation("BlindVotes");
                });
#pragma warning restore 612, 618
        }
    }
}
