@page
@model Pumpkin.Beer.Taste.Pages.BlindPages.EditModel

@{
    ViewData["Title"] = "Edit";
}

<page-heading heading="Edit" />

<div id="editContainer" x-data="blindEditData">
    <div class="card border-primary">
        <div class="card-body">
            <form method="post">
                <input type="hidden" asp-for="Blind.Id" />
                <div class="row">
                    <div class="col-md-6 pb-2">
                        <div asp-validation-summary="All" class="text-danger"></div>

                        <div class="mb-3">
                            <label asp-for="Blind.Name" class="control-label"></label>
                            <input asp-for="Blind.Name" class="form-control" placeholder="My Pumpkin Beer Tasting" />
                            <span asp-validation-for="Blind.Name" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <label asp-for="Blind.Started" class="control-label"></label>
                            <input asp-for="Blind.Started" class="form-control" x-model="startDateUtc" type="hidden" />
                            <div class="input-group">
                                <input class="form-control" x-model="startDate" type="datetime-local" required />
                                <button type="button" class="btn btn-outline-warning" x-on:click="setStartDate">Start Now</button>
                            </div>
                            <span asp-validation-for="Blind.Started" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <label asp-for="Blind.Closed" class="control-label"></label>
                            <input asp-for="Blind.Closed" class="form-control" x-model="closedDateUtc" type="hidden" />
                            <div class="input-group">
                                <input class="form-control" x-model="closedDate" type="datetime-local" required />
                                <button type="button" class="btn btn-outline-warning" x-on:click="setClosedDateOneHour">+1 Hour</button>
                            </div>
                            <span asp-validation-for="Blind.Closed" class="text-danger"></span>
                        </div class="mb-3">

                        <div>
                            <div class="accordion" id="advancedTimeZones">
                                <div class="accordion-item">
                                    <h2 class="accordion-header">
                                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#timezones" aria-expanded="false" aria-controls="timezones">
                                            Advanced Options
                                        </button>
                                    </h2>
                                    <div id="timezones" class="accordion-collapse collapse" data-bs-parent="#advancedTimeZones">
                                        <div class="accordion-body">

                                            <div class="mb-3">
                                                <p>If you want this event to start and end in a different Time Zone, you can change that here.</p>

                                                <label for="ianaTimeZone">Time Zone</label>
                                                <select id="ianaTimeZone" class="form-control" name="Blind.StartedAndClosedIANATimeZoneId" x-model="selectedIANATimeZone">
                                                    <template x-for="timeZone in timeZones" :key="timeZone">
                                                        <option x-text="timeZone"
                                                                :value="timeZone"
                                                                :selected="timeZone === selectedIANATimeZone"></option>
                                                    </template>
                                                </select>
                                                <div id="ianaTimeZoneHelpBlock" class="form-text">
                                                    <p>Your profile TimeZone is set to: <strong>@Model.CurrentUserProfileIANATimeZoneId</strong>. <a asp-area="" asp-page="/Account/Profile">Click here</a> to update it if needed. Your profile time zone determines what events you see across the site.</p>
                                                </div>
                                                <span asp-validation-for="Blind.StartedAndClosedIANATimeZoneId" class="text-danger"></span>
                                            </div>

                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6 pb-2">
                        <div class="card border-primary">
                            <div class="card-body">
                                <h5 class="card-title">Edit Items</h5>
                                <ul class="list-unstyled">
                                    <template x-for="(blindItem, index) in blindItems" :key="index">
                                        <li>
                                            <div class="input-group mb-3">
                                                <input type="hidden" :name="getInputIdName(index)" x-model="blindItem.Id" />
                                                <span class="input-group-text" x-text="'Item ' + getBlindItemLetter(blindItem)"></span>
                                                <input class="form-control" :placeholder="generatePlaceholder()" x-model="blindItem.Name" :name="getInputName(index)" required />
                                                <button class="btn btn-outline-danger" x-on:click="removeBlindItem(index)" x-bind:disabled="removeDisabled" type="button">Remove</button>
                                            </div>
                                        </li>
                                    </template>
                                </ul>
                                <button id="add" type="button" x-on:click="addBlindItem" x-bind:disabled="addDisabled" class="btn btn-outline-primary">Add another item</button>
                            </div>
                        </div>
                    </div>

                    <div class="d-grid gap-2 d-md-block mb-3">
                        <input type="submit" value="Save Changes" class="btn btn-success" />
                    </div>
                    <div>
                        <a asp-page="Index">Back</a>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        document.addEventListener('alpine:init', () => {
            Alpine.data('blindEditData', () => ({
                blindItems: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.BlindItems.Select(item => new { 
                    Id = item.Id,
                    Name = item.Name,
                }), new System.Text.Json.JsonSerializerOptions { PropertyNamingPolicy = null })),
                startDate: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Blind.Started.ToString("yyyy-MM-ddTHH:mm"))),
                closedDate: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Blind.Closed.ToString("yyyy-MM-ddTHH:mm"))),
                timeZones: Intl.supportedValuesOf('timeZone'),
                selectedIANATimeZone: '@Html.Raw(Model.Blind.StartedAndClosedIANATimeZoneId)',
                addDisabled: false,
                get removeDisabled() {
                    return this.blindItems.length == 1;
                },
                get startDateUtc() {
                    if (this.startDate === null) {
                        return null;
                    }
                    return moment(this.startDate).utc().format(aspNetCoreMomentFormat);
                },

                get closedDateUtc() {
                    if (this.closedDate === null) {
                        return null;
                    }
                    return moment(this.closedDate).utc().format(aspNetCoreMomentFormat);
                },

                setStartDate() {
                    this.startDate = moment().format(aspNetCoreMomentFormat);
                },

                setClosedDate() {
                    let now = moment();
                    now.hour(23);
                    now.minute(59);
                    this.closedDate = now.format(aspNetCoreMomentFormat);
                },

                setClosedDateOneHour() {
                    let now = moment().add(1, 'hours');
                    this.closedDate = now.format(aspNetCoreMomentFormat);
                },

                removeBlindItem(index) {

                    if (this.blindItems.length === 1) {
                        return;
                    }

                    this.blindItems.splice(index, 1);
                    this.blindItems.forEach((item, i) => {
                        item.Letter = enAlphabet[i];
                    });
                },

                addBlindItem() {
                    this.blindItems.push({
                        Name:'',
                        Letter: enAlphabet[this.blindItems.length]
                    });

                    // Limit to 26
                    if (this.blindItems.length === enAlphabet.length) {
                        this.addDisabled = true;
                        return;
                    }
                },

                getBlindItemLetter(blindItem) {

                    if (!blindItem.Letter) {
                        return 'A';
                    }

                   return blindItem.Letter;
                },

                generatePlaceholder() {
                    const alcoholItems = [
                        "Vanilla Cinnamon Pumpkin Ale from Spooky Brew Co.",
                        "1998 Missouri Winery Cab Sav from Haunted Vineyards",
                        "Spiced Pumpkin Lager from Ghostly Brews",
                        "Maple Pumpkin Stout from Witch's Brewery",
                        "Honey Pumpkin IPA from Phantom Hops",
                        "Pumpkin Spice Porter from Goblin's Brewery",
                        "Pumpkin Apple Cider from Enchanted Orchards",
                        "Pumpkin Mead with Nutmeg from Mystic Meadery",
                        "Pumpkin Bourbon Barrel Aged from Specter Spirits",
                        "Pumpkin Vodka Infusion from Eerie Distillery"
                    ];
                    const randomIndex = Math.floor(Math.random() * alcoholItems.length);
                    return alcoholItems[randomIndex];
                },

                getInputIdName(index) {
                    return `BlindItems[${index}].Id`;
                },

                getInputName(index) {
                    return `BlindItems[${index}].Name`;
                }
            }))
        })
    </script>
}
